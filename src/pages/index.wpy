<style lang="less">
  @import "../static/styles/common";
</style>

<template>
  <view style="width: 100%; height: 100%;">

    <view class="container" id="wrapper">
      <image mode="widthFix" class="draw circle" src="../assets/demo.jpg"/>
    </view>

    <movable-area style="height: 100%; width: 100%; position: absolute;" scale-area>
      <movable-view style="width: 100%;" direction="vertical" bindchange="onChange">
        <view class="like_bg">
          <image class="like_icon" src="../assets/like.png"></image>

          <view class="avatar_container">
            <repeat for="{{ items }}" item="item">
              <image class="avatar" src="{{ item }}"></image>
            </repeat>
          </view>
        </view>
      </movable-view>
    </movable-area>

    <view class="generate" bindtap="drawCanvas">生成</view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import wxml2canvas from '../util/wxml2canvas'
  import {avatars} from '../util/avatars'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: 'Fake',
      navigationBarTextStyle: 'black'
    }

    data = {
      position: 0,
      items: null
    }

    methods = {
      onChange(e) {
        this.position = e.detail.y
      },

      async drawCanvas() {
        let str = 'haha'
        if (str === 'haha') {
          wepy.navigateTo({url: `./preview?position=${this.position}`})
          return
        }

        const canvasId = 'canvas-map'

        await wxml2canvas('#wrapper', '.draw', canvasId)

        let res = await wepy.canvasToTempFilePath({canvasId, quality: 1})
        let settings = await wepy.getSetting()

        if (!settings.authSetting['scope.writePhotosAlbum']) {
          let authResult = await wepy.authorize({scope: 'scope.writePhotosAlbum'})

          if (authResult.errMsg !== 'authorize:ok') {
            return
          }
        }
        wepy.saveImageToPhotosAlbum({filePath: res.tempFilePath})
      }
    }

    onLoad() {
      this.items = avatars
    }
  }
</script>
