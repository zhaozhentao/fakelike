<style lang="less">
  @import "../static/styles/common";

  .like_container {
    position: absolute;
    left: 0;
    right: 0;
    padding: 8px;
    background-color: #f2f0f4;
    margin-left: 10px;
    margin-right: 10px;
    display: flex;
  }
</style>

<template>
  <view style="width: 100%; height: 100%;">
    <canvas canvas-id="canvas-map" class="share-canvas"></canvas>

    <view class="container" id="wrapper">
      <image mode="widthFix" data-z-index="0" class="draw circle" src="{{path}}"/>

      <view class="like_container draw" data-z-index="1" style="{{style}}">
        <image class="like_icon draw" data-z-index="2" src="../assets/like.png"></image>

        <view class="avatar_container draw" data-z-index="2">
          <repeat for="{{ items }}" item="item">
            <image class="avatar draw" data-z-index="2" src="{{ item }}"></image>
          </repeat>
        </view>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import wxml2canvas from '../util/wxml2canvas'
  import {avatars} from '../util/avatars'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: 'Fake',
      navigationBarTextStyle: 'black',
      navigationStyle: 'custom'
    }

    data = {
      path: null,
      position: 0,
      items: null,
      style: ''
    }

    async create() {
      const canvasId = 'canvas-map'

      await wxml2canvas('#wrapper', '.draw', canvasId)

      let res = await wepy.canvasToTempFilePath({
        fileType: 'jpg',
        canvasId,
        quality: 1.0
      })

      let settings = await wepy.getSetting()

      if (!settings.authSetting['scope.writePhotosAlbum']) {
        let authResult = await wepy.authorize({scope: 'scope.writePhotosAlbum'})

        if (authResult.errMsg !== 'authorize:ok') {
          return
        }
      }
      wepy.saveImageToPhotosAlbum({filePath: res.tempFilePath})

      wepy.showToast({title: '到相册查看截图', icon: 'none', duration: 2000})
    }

    onLoad(options) {
      this.position = options.position
      this.path = options.path
      this.items = avatars.slice(0, parseInt(options.value))
      this.style = `top: ${this.position}px;`

      let self = this
      setTimeout(function () {
        self.create()
      }, 1000)
    }
  }
</script>
